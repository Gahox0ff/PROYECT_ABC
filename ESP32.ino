#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "BluetoothSerial.h"

BluetoothSerial SerialBT;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_MOSI   23
#define OLED_CLK    18
#define OLED_DC     2
#define OLED_CS     5
#define OLED_RESET  4

#define RXD2 16
#define TXD2 17

bool mostrarLogoActiva = false;
unsigned long tiempoInicioLogo = 0;
const unsigned long DURACION_CADA_LOGO = 3000; // 3 segundos para cada imagen
const unsigned long DURACION_TOTAL_LOGOS = 6000; // 6 segundos total (2 imágenes)
int imagenActual = 1; // 1 = primera imagen, 2 = segunda imagen

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI, OLED_DC, OLED_RESET, OLED_CS);

String frecuencia = "";
String temperatura = "";
String humedad = "";
String luz = "";
String conteo = "";

// Variables para control de actualización de pantalla
unsigned long ultimaActualizacionPantalla = 0;
const unsigned long INTERVALO_ACTUALIZACION = 100; // Actualizar pantalla cada 100ms

// Primera imagen en formato XBM
#define logo_width 128
#define logo_height 64
const unsigned char logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x10, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x03, 0xf8, 0xff, 0xe3, 0xff, 0xcf, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xff, 0x03, 0xfe, 0x07, 0xff, 0xe0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x1f, 0xc3, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x03, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x03, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x03, 0xff, 0x8f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x03, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

#define logo2_width 128
#define logo2_height 64
const unsigned char logo2_bits[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 
	0xfe, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xff, 
	0xfb, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xbf, 
	0xee, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0xe7, 
	0x3c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x39, 
	0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 
	0xe7, 0xff, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xcf, 0x00, 0x07, 0x07, 0xcf, 0xff, 0xff, 0xf3, 0xf0, 0x00, 0x00, 0xc3, 0xff, 0xff, 
	0xff, 0xff, 0x3e, 0x00, 0xe3, 0xbf, 0xc7, 0xff, 0xff, 0xe3, 0xdc, 0xe0, 0x00, 0x7c, 0xff, 0xff, 
	0xff, 0xfc, 0xfc, 0x00, 0x03, 0xdf, 0xe7, 0xff, 0xff, 0xe7, 0xfb, 0xc0, 0x00, 0x3f, 0x3f, 0xff, 
	0xff, 0xe3, 0xfc, 0x00, 0x03, 0xef, 0xef, 0xff, 0xff, 0xe7, 0xf7, 0xc0, 0x00, 0x3f, 0xcf, 0xff, 
	0xff, 0xcc, 0x7e, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0x33, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xe1, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf9, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xf3, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xe7, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xe7, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x7c, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void mostrarLogo() {
  display.clearDisplay();
  
  // Mostrar la primera imagen
  if (imagenActual == 1) {
    display.drawBitmap(0, 0, logo_bits, logo_width, logo_height, SSD1306_WHITE);
  } 
  // Mostrar la segunda imagen
  else if (imagenActual == 2) {
    display.drawBitmap(0, 0, logo2_bits, logo2_width, logo2_height, SSD1306_WHITE);
  }
  
  display.display();
  
  // Solo inicializar el timer si no estaba activo
  if (!mostrarLogoActiva) {
    mostrarLogoActiva = true;
    tiempoInicioLogo = millis();
    imagenActual = 1; // Empezar siempre con la primera imagen
  }
}

void actualizarPantallaDatos() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.println(frecuencia);
  display.println(temperatura);
  display.println(humedad);
  display.println(luz);
  display.println(conteo);
  display.display();
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  SerialBT.begin("ESP32_BT");

  SPI.begin(OLED_CLK, -1, OLED_MOSI, OLED_CS);

  if (!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println("No se pudo iniciar OLED");
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Esperando datos...");
  display.display();
}

void loop() {
  unsigned long tiempoActual = millis();
  
  // Gestión de las imágenes del logo
  if (mostrarLogoActiva) {
    unsigned long tiempoTranscurrido = tiempoActual - tiempoInicioLogo;
    
    // Cambiar a la segunda imagen después de 3 segundos
    if (tiempoTranscurrido >= DURACION_CADA_LOGO && imagenActual == 1) {
      imagenActual = 2;
      display.clearDisplay();
      display.drawBitmap(0, 0, logo2_bits, logo2_width, logo2_height, SSD1306_WHITE);
      display.display();
    }
    
    // Terminar secuencia de logos después de 6 segundos
    if (tiempoTranscurrido >= DURACION_TOTAL_LOGOS) {
      mostrarLogoActiva = false;
      imagenActual = 1; // Reset para la próxima vez
      // Actualizar inmediatamente la pantalla con los datos actuales
      actualizarPantallaDatos();
    }
  }

  // Procesar datos del Arduino Mega (UART)
  if (Serial2.available()) {
    frecuencia   = Serial2.readStringUntil('\n');
    temperatura  = Serial2.readStringUntil('\n');
    humedad      = Serial2.readStringUntil('\n');
    luz          = Serial2.readStringUntil('\n');
    conteo       = Serial2.readStringUntil('\n');

    // Enviar datos por Bluetooth siempre
    SerialBT.println(frecuencia);
    SerialBT.println(temperatura);
    SerialBT.println(humedad);
    SerialBT.println(luz);
    SerialBT.println(conteo);

    // Solo actualizar la pantalla si no se está mostrando el logo
    // y ha pasado el tiempo mínimo entre actualizaciones
    if (!mostrarLogoActiva && (tiempoActual - ultimaActualizacionPantalla >= INTERVALO_ACTUALIZACION)) {
      actualizarPantallaDatos();
      ultimaActualizacionPantalla = tiempoActual;
    }
  }

  // Procesar comandos por Bluetooth
  if (SerialBT.available()) {
    String comando = SerialBT.readStringUntil('\n');
    comando.trim();

    if (comando.equalsIgnoreCase("LOGO")) {
      mostrarLogo();
    } else {
      // Reenviar comando al Arduino Mega
      Serial2.println(comando);
    }
  }
}
